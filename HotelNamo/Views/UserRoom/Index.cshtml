@model List<HotelNamo.Models.Room>
@{
    Layout = "_UserLayout";
    ViewData["Title"] = "Available Rooms";

    // Helper function to determine image path based on room category
    string GetImagePath(string category)
    {
        return category switch
        {
            "Single" => "~/images/rooms/single-room.jpg",
            "Double" => "~/images/rooms/guest-room.jpg",
            "Suite" => "~/images/rooms/superior-room.jpg",
            _ => "~/images/rooms/deluxe-room.jpg" // fallback image
        };
    }

    // Get price range for slider
    var minPrice = Model.Any() ? Model.Min(r => r.Price) : 0;
    var maxPrice = Model.Any() ? Model.Max(r => r.Price) : 1000;
}

<div class="container-fluid my-4">
    <div class="row">
        <div class="col-12">
            <h2 class="text-center mb-2">Available Rooms</h2>
            <p class="text-muted text-center mb-4">Find the perfect accommodation for your stay</p>
        </div>
    </div>

    <div class="row">
        <!-- Left Sidebar Filters -->
        <div class="col-lg-3 mb-4">
            <div class="card shadow-sm border-0 filter-sidebar">
                <div class="card-header bg-white py-3">
                    <div class="d-flex align-items-center justify-content-between">
                        <h5 class="mb-0">
                            <i class="fas fa-filter me-2 text-primary"></i>Filters
                        </h5>
                        <button id="toggleFilters" class="btn btn-sm btn-outline-secondary d-lg-none">
                            <i class="fas fa-chevron-down"></i>
                        </button>
                    </div>
                </div>

                <div class="card-body p-4" id="filterBody">
                    <!-- Room Number Search -->
                    <div class="mb-4">
                        <label for="searchInput" class="form-label">Room Number</label>
                        <div class="input-group">
                            <span class="input-group-text bg-white">
                                <i class="fas fa-search text-muted"></i>
                            </span>
                            <input type="text" id="searchInput" class="form-control" placeholder="Search...">
                        </div>
                    </div>

                    <!-- Category Filter -->
                    <div class="mb-4">
                        <label for="categoryFilter" class="form-label">Room Category</label>
                        <select id="categoryFilter" class="form-select">
                            <option value="">All Categories</option>
                            @foreach (var category in Model.Select(r => r.Category).Distinct())
                            {
                                <option value="@category">@category</option>
                            }
                        </select>
                    </div>

                    <!-- Price Range -->
                    <div class="mb-4">
                        <label for="priceRange" class="form-label">Price Range</label>
                        <span id="priceRangeValue" class="d-block mb-2 fw-bold text-primary">$@minPrice - $@maxPrice</span>
                        <div class="d-flex gap-2 align-items-center">
                            <span class="text-muted small">$@minPrice</span>
                            <input type="range" class="form-range flex-grow-1" id="priceRange"
                                   min="@minPrice" max="@maxPrice" step="10" value="@maxPrice">
                            <span class="text-muted small">$@maxPrice</span>
                        </div>
                    </div>

                    <!-- Sort Order -->
                    <div class="mb-4">
                        <label for="sortOrder" class="form-label">Sort By</label>
                        <select id="sortOrder" class="form-select">
                            <option value="default">Default</option>
                            <option value="price-asc">Price: Low to High</option>
                            <option value="price-desc">Price: High to Low</option>
                            <option value="category">Category</option>
                        </select>
                    </div>

                    <!-- Active Filters Tags -->
                    <div class="mb-4" id="activeFilters">
                        <label class="form-label">Active Filters</label>
                        <div class="d-flex flex-wrap gap-2">
                            <!-- Active filter tags will be inserted here via JavaScript -->
                        </div>
                    </div>

                    <!-- Reset Filters -->
                    <button id="resetAllFilters" class="btn btn-outline-primary w-100">
                        <i class="fas fa-sync-alt me-2"></i>Reset All Filters
                    </button>
                </div>
            </div>
        </div>

        <!-- Main Content Area -->
        <div class="col-lg-9">
            <!-- Results Summary -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <p class="mb-0"><span id="roomCount">@Model.Count()</span> rooms available</p>
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-secondary active" id="gridView">
                        <i class="fas fa-th-large"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary" id="listView">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>

            <!-- Room Cards -->
            <div class="row g-4" id="roomContainer">
                @foreach (var room in Model)
                {
                    <div class="col-md-6 col-xl-4 room-card"
                         data-roomnumber="@room.RoomNumber"
                         data-category="@room.Category"
                         data-price="@room.Price">
                        <div class="card shadow-sm h-100 border-0 rounded-3 room-card-hover">
                            <!-- Image with category badge -->
                            <div class="position-relative">
                                <img src="@Url.Content(GetImagePath(room.Category))"
                                     class="card-img-top"
                                     alt="@room.Category Room"
                                     style="height: 200px; object-fit: cover;"
                                     onerror="this.onerror=null; this.src='@Url.Content("~/images/rooms/deluxe-room.jpg")';">
                                <span class="position-absolute top-0 end-0 badge bg-dark m-2 px-2 py-1">
                                    @room.Category
                                </span>
                            </div>

                            <div class="card-body d-flex flex-column">
                                <div class="mb-auto">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h5 class="card-title mb-0">Room @room.RoomNumber</h5>
                                        <span class="badge @(room.Status == "Vacant" ? "bg-success" : "bg-danger")">
                                            @room.Status
                                        </span>
                                    </div>

                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <span class="fw-bold fs-5 text-primary">@($"{room.Price:C0}")</span>
                                        <span class="text-muted small">per night</span>
                                    </div>

                                    <!-- Room amenities preview -->
                                    <div class="mb-3">
                                        <div class="d-flex flex-wrap gap-2">
                                            @{
                                                var amenities = new[] { "Wi-Fi", "TV", "AC", "Mini Bar" };
                                                foreach (var amenity in amenities.Take(3))
                                                {
                                                    <span class="badge bg-light text-dark">
                                                        <i class="fas fa-check me-1 text-success small"></i>@amenity
                                                    </span>
                                                }
                                                if (amenities.Length > 3)
                                                {
                                                    <span class="badge bg-light text-dark">+@(amenities.Length - 3) more</span>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="d-flex gap-2">
                                    <a asp-action="Details" asp-route-id="@room.Id" class="btn btn-outline-primary rounded-pill flex-grow-1">
                                        <i class="fas fa-info-circle me-1"></i> Details
                                    </a>
                                    <a asp-action="Create" asp-controller="Booking"
                                       asp-route-roomId="@room.Id"
                                       class="btn btn-primary rounded-pill flex-grow-1">
                                        <i class="fas fa-calendar-check me-1"></i> Book Now
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- List View (initially hidden) -->
            <div class="d-none" id="roomListContainer">
                <div class="card shadow-sm border-0">
                    <div class="list-group list-group-flush">
                        @foreach (var room in Model)
                        {
                            <div class="list-group-item p-3 room-list-item"
                                 data-roomnumber="@room.RoomNumber"
                                 data-category="@room.Category"
                                 data-price="@room.Price">
                                <div class="row align-items-center">
                                    <div class="col-lg-2 col-md-3 mb-2 mb-md-0">
                                        <img src="@Url.Content(GetImagePath(room.Category))"
                                             class="img-fluid rounded"
                                             alt="@room.Category Room"
                                             onerror="this.onerror=null; this.src='@Url.Content("~/images/rooms/deluxe-room.jpg")';">
                                    </div>
                                    <div class="col-lg-3 col-md-3 mb-2 mb-md-0">
                                        <h5 class="mb-1">Room @room.RoomNumber</h5>
                                        <span class="badge @(room.Status == "Vacant" ? "bg-success" : "bg-danger") me-2">
                                            @room.Status
                                        </span>
                                        <span class="badge bg-dark">@room.Category</span>
                                    </div>
                                    <div class="col-lg-3 col-md-3 mb-2 mb-md-0">
                                        <span class="fw-bold fs-5 text-primary">@($"{room.Price:C0}")</span>
                                        <span class="text-muted d-block small">per night</span>
                                    </div>
                                    <div class="col-lg-4 col-md-3 text-md-end">
                                        <a asp-action="Details" asp-route-id="@room.Id" class="btn btn-outline-primary btn-sm me-1">
                                            <i class="fas fa-info-circle"></i> Details
                                        </a>
                                        <a asp-action="Create" asp-controller="Booking"
                                           asp-route-roomId="@room.Id"
                                           class="btn btn-primary btn-sm">
                                            <i class="fas fa-calendar-check"></i> Book Now
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- No Results Message (initially hidden) -->
            <div id="noResults" class="text-center py-5 d-none">
                <div class="card shadow-sm border-0 p-5">
                    <div class="py-4">
                        <i class="fas fa-bed text-muted" style="font-size: 3rem;"></i>
                        <h5 class="mt-3">No rooms match your search criteria</h5>
                        <p class="text-muted">Try adjusting your filters or search terms</p>
                        <button id="resetFilters" class="btn btn-outline-primary mt-2">
                            <i class="fas fa-sync-alt me-1"></i> Reset Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .room-card-hover {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .room-card-hover:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
            }

        .text-primary,
        .btn-outline-primary {
            color: #b59678 !important;
        }

        .btn-primary,
        .bg-primary {
            background-color: #b59678 !important;
            border-color: #b59678 !important;
        }

            .btn-primary:hover,
            .btn-primary:focus {
                background-color: #a08467 !important;
                border-color: #a08467 !important;
            }

        .btn-outline-primary {
            border-color: #b59678 !important;
        }

            .btn-outline-primary:hover,
            .btn-outline-primary:focus {
                background-color: #b59678 !important;
                color: white !important;
            }

        /* Customize range slider */
        .form-range::-webkit-slider-thumb {
            background: #b59678;
        }

        .form-range::-moz-range-thumb {
            background: #b59678;
        }

        .form-range::-ms-thumb {
            background: #b59678;
        }

        /* Active filters styling */
        .filter-badge {
            background-color: rgba(181, 150, 120, 0.1);
            color: #b59678;
            border: 1px solid #b59678;
            font-weight: normal;
        }

            .filter-badge .close-btn {
                cursor: pointer;
                opacity: 0.7;
            }

                .filter-badge .close-btn:hover {
                    opacity: 1;
                }
        /* Sidebar style adjustments */
        .filter-sidebar {
            position: sticky;
            top: 20px;
            z-index: 100;
        }

        .filter-section {
            margin-bottom: 1.5rem;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const searchInput = document.getElementById('searchInput');
            const categoryFilter = document.getElementById('categoryFilter');
            const priceRange = document.getElementById('priceRange');
            const priceRangeValue = document.getElementById('priceRangeValue');
            const sortOrder = document.getElementById('sortOrder');
            const roomCards = document.querySelectorAll('.room-card');
            const roomListItems = document.querySelectorAll('.room-list-item');
            const roomContainer = document.getElementById('roomContainer');
            const roomListContainer = document.getElementById('roomListContainer');
            const noResults = document.getElementById('noResults');
            const resetFilters = document.getElementById('resetFilters');
            const resetAllFilters = document.getElementById('resetAllFilters');
            const roomCount = document.getElementById('roomCount');
            const gridViewBtn = document.getElementById('gridView');
            const listViewBtn = document.getElementById('listView');
            const toggleFilters = document.getElementById('toggleFilters');
            const filterBody = document.getElementById('filterBody');
            const activeFilters = document.getElementById('activeFilters');

            // Initial price range value
            const minPrice = @minPrice;
            const maxPrice = @maxPrice;
            let currentMaxPrice = maxPrice;

            // Update price range value display
            priceRange.addEventListener('input', function() {
                currentMaxPrice = this.value;
                priceRangeValue.textContent = `$${minPrice} - $${currentMaxPrice}`;
                updateActiveFilters();
                filterRooms();
            });

            // Toggle filters panel (mobile only)
            toggleFilters.addEventListener('click', function() {
                if (filterBody.style.display === 'none') {
                    filterBody.style.display = 'block';
                    this.querySelector('i').classList.replace('fa-chevron-down', 'fa-chevron-up');
                } else {
                    filterBody.style.display = 'none';
                    this.querySelector('i').classList.replace('fa-chevron-up', 'fa-chevron-down');
                }
            });

            // Toggle view mode
            gridViewBtn.addEventListener('click', function() {
                roomContainer.classList.remove('d-none');
                roomListContainer.classList.add('d-none');
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
            });

            listViewBtn.addEventListener('click', function() {
                roomContainer.classList.add('d-none');
                roomListContainer.classList.remove('d-none');
                gridViewBtn.classList.remove('active');
                listViewBtn.classList.add('active');
            });

            // Update active filters display
            function updateActiveFilters() {
                let filterTags = [];
                const searchTerm = searchInput.value.trim();
                const categoryTerm = categoryFilter.value;
                const sortTerm = sortOrder.value;

                // Clear active filters
                activeFilters.querySelector('div').innerHTML = '';

                // Add search filter tag
                if (searchTerm) {
                    addFilterTag('Search', `"${searchTerm}"`, () => {
                        searchInput.value = '';
                        filterRooms();
                        updateActiveFilters();
                    });
                }

                // Add category filter tag
                if (categoryTerm) {
                    addFilterTag('Category', categoryTerm, () => {
                        categoryFilter.value = '';
                        filterRooms();
                        updateActiveFilters();
                    });
                }

                // Add price range filter tag if not at max
                if (currentMaxPrice < maxPrice) {
                    addFilterTag('Max Price', `$${currentMaxPrice}`, () => {
                        priceRange.value = maxPrice;
                        currentMaxPrice = maxPrice;
                        priceRangeValue.textContent = `$${minPrice} - $${maxPrice}`;
                        filterRooms();
                        updateActiveFilters();
                    });
                }

                // Add sort filter tag
                if (sortTerm !== 'default') {
                    let sortLabel = '';
                    switch(sortTerm) {
                        case 'price-asc': sortLabel = 'Price: Low to High'; break;
                        case 'price-desc': sortLabel = 'Price: High to Low'; break;
                        case 'category': sortLabel = 'Category'; break;
                    }
                    addFilterTag('Sort', sortLabel, () => {
                        sortOrder.value = 'default';
                        filterRooms();
                        updateActiveFilters();
                    });
                }

                // Show or hide the active filters section
                const hasActiveFilters = activeFilters.querySelector('div').children.length > 0;
                activeFilters.style.display = hasActiveFilters ? 'block' : 'none';
            }

            // Initially hide active filters if empty
            activeFilters.style.display = 'none';

            // Add filter tag helper
            function addFilterTag(type, value, removeCallback) {
                const tag = document.createElement('span');
                tag.className = 'badge py-2 px-3 mb-2 me-2 filter-badge';
                tag.innerHTML = `${type}: ${value} <i class="fas fa-times ms-2 close-btn"></i>`;

                tag.querySelector('.close-btn').addEventListener('click', removeCallback);
                activeFilters.querySelector('div').appendChild(tag);
            }

            // Function to filter and sort rooms
            function filterRooms() {
                const searchTerm = searchInput.value.toLowerCase();
                const categoryTerm = categoryFilter.value;
                const sortMethod = sortOrder.value;
                let visibleRooms = [];

                // Get all visible rooms
                roomCards.forEach((card, index) => {
                    const roomNumber = card.getAttribute('data-roomnumber').toLowerCase();
                    const category = card.getAttribute('data-category');
                    const price = parseInt(card.getAttribute('data-price'));

                    const matchesSearch = roomNumber.includes(searchTerm);
                    const matchesCategory = categoryTerm === '' || category === categoryTerm;
                    const matchesPrice = price <= currentMaxPrice;

                    if (matchesSearch && matchesCategory && matchesPrice) {
                        card.classList.remove('d-none');
                        roomListItems[index].classList.remove('d-none');
                        visibleRooms.push({
                            card: card,
                            listItem: roomListItems[index],
                            price: price,
                            category: category
                        });
                    } else {
                        card.classList.add('d-none');
                        roomListItems[index].classList.add('d-none');
                    }
                });

                // Sort visible rooms
                if (sortMethod !== 'default') {
                    visibleRooms.sort((a, b) => {
                        switch(sortMethod) {
                            case 'price-asc': return a.price - b.price;
                            case 'price-desc': return b.price - a.price;
                            case 'category': return a.category.localeCompare(b.category);
                            default: return 0;
                        }
                    });

                    // Reorder DOM elements
                    visibleRooms.forEach(room => {
                        roomContainer.appendChild(room.card);
                        roomListContainer.querySelector('.list-group').appendChild(room.listItem);
                    });
                }

                // Update room count
                roomCount.textContent = visibleRooms.length;

                // Show/hide no results message
                if (visibleRooms.length === 0) {
                    roomContainer.classList.add('d-none');
                    roomListContainer.classList.add('d-none');
                    noResults.classList.remove('d-none');
                } else {
                    if (gridViewBtn.classList.contains('active')) {
                        roomContainer.classList.remove('d-none');
                    } else {
                        roomListContainer.classList.remove('d-none');
                    }
                    noResults.classList.add('d-none');
                }
            }

            // Event listeners
            searchInput.addEventListener('input', function() {
                filterRooms();
                updateActiveFilters();
            });

            categoryFilter.addEventListener('change', function() {
                filterRooms();
                updateActiveFilters();
            });

            sortOrder.addEventListener('change', function() {
                filterRooms();
                updateActiveFilters();
            });

            priceRange.addEventListener('change', function() {
                filterRooms();
                updateActiveFilters();
            });

            // Reset filters
            resetFilters.addEventListener('click', function() {
                searchInput.value = '';
                categoryFilter.value = '';
                sortOrder.value = 'default';
                priceRange.value = maxPrice;
                currentMaxPrice = maxPrice;
                priceRangeValue.textContent = `$${minPrice} - $${maxPrice}`;
                filterRooms();
                updateActiveFilters();
            });

            resetAllFilters.addEventListener('click', function() {
                searchInput.value = '';
                categoryFilter.value = '';
                sortOrder.value = 'default';
                priceRange.value = maxPrice;
                currentMaxPrice = maxPrice;
                priceRangeValue.textContent = `$${minPrice} - $${maxPrice}`;
                filterRooms();
                updateActiveFilters();
            });
        });
    </script>
}